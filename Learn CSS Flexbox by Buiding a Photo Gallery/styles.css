/*he global (*) selector*/
/*The box-sizing property defines how the width and height of an element are calculated: should they include padding and borders, or not.*/
*{
    box-sizing: border-box;
}

.gallery img{
    width: 100%;
    max-width: 350px;
    height: 300px;
    /*Notice how some of your images have become distorted. This is because the images have different aspect ratios.*/
    /*we can use the object-fit property to determine how images should behave.*/
    /*Give your .gallery img selector the object-fit property and set it to cover. This will tell the image to fill the img container while maintaining aspect ratio, resulting in cropping to fit.*/
    object-fit: cover;
    border-radius: 10px;
}

body{
    margin: 0;
    font-family: sans-serif;
    background-color: #f5f6f7;
}

.header{
    text-align: center;
    text-transform: uppercase;
    padding: 32px;
    color:#fff;
    border-bottom: 4px solid #fdb347;
    background-color: #0a0a23;
}

.gallery{
    /*https://www.w3schools.com/cssref/pr_class_display.php*/
    /*find more about flex:https://www.w3schools.com/css/css3_flexbox.asp*/
    display: flex;
    /*The flex-direction property specifies the direction of the flexible items.*/
    /*https://www.w3schools.com/cssref/css3_pr_flex-direction.php*/
    flex-direction: row;
    /*The flex-wrap property determines how your flex items behave when the flex container is too small.*/
    /*The flex-wrap property specifies whether the flexible items should wrap or not. Note: If the elements are not flexible items, the flex-wrap property has no effect.*/
    flex-wrap: wrap;
    /*The justify-content property determines how the items inside a flex container are positioned along the main axis, affecting their position and the space around them.*/
    justify-content: center;
    align-items: center;
    padding:20px 10px;
    max-width: 1400px;
    margin: 0 auto;
    /*The gap CSS shorthand property sets the gaps, also known as gutters, between rows and columns.*/
    /*The gap property and its row-gap and column-gap sub-properties provide this functionality for flex, grid, and multi-column layout.*/
    gap: 16px;
}

/*The ::after pseudo-element creates an element that is the last child of the selected element.*/
/*we can use it to add an empty element after the last image*/
/*If you give it the same width as the images it will push the last image to the left when the gallery is in a two-column layout.*/
/*but it is in the center because you set justify-content: center on the flex container.*/
.gallery::after{
    content: "";
    width: 350px;
}